require 'rake/clean'

SRC          = FileList['*.cc']
OBJ          = SRC.ext('o')
BIN          = 'lrun'
CXX          = ENV['CXX'] || 'g++'
CXXFLAGS     = ENV['CXXFLAGS'] || '-O2 -Wall'
LD           = ENV['LD'] || CXX
PREFIX       = ENV['PREFIX'] || '/usr/local'
INSTALL      = ENV['INSTALL'] || 'install'
SUDO         = ENV['SUDO'] || 'sudo'
LRUN_GROUP   = ENV['LRUN_GROUP'] || 'lrun'
LRUN_GID     = ENV['LRUN_GID'] || '593'
TMP_DIR      = ENV['TMP'] || ENV['TEMP'] || '/tmp'
NULL         = ENV['NULL'] || '/dev/null'
NODEBUG_FLAG = ENV['NODEBUG'] ? '-DNODEBUG' : ''
GROUPADD     = ENV['GROUPADD'] || 'groupadd'

CLEAN.include('*.o')
CLOBBER.include(BIN)

# Ruby 1.8 missing features
# -------------------------
unless File.respond_to?(:write)
  def File.write(filename, content)
    File.open(filename, 'w') {|f| f.write(content)}
  end
end

# Helper methods
# --------------

def executable_exists?(name)
  # only interested in first word in name
  name = name.split.first
  @executable_exists ||= {}
  # assuming we are in Linux, check $PATH
  @executable_exists[name] = ENV['PATH'].split(':').any? do |dir|
    File.executable? File.join(dir, name)
  end
end

def require_executable!(name)
  raise "required '#{name}' not found" unless executable_exists? name
end

def pkgconfig(params)
  require_executable! 'pkg-config'
  @pkgconfig_results ||= {}
  @pkgconfig_results[params.to_s] ||= `pkg-config --silence-errors #{params}`.chomp
end

def try_cxxflags(*flags)
  @cflags ||= {}
  blank_cpp_path = File.join((Dir.tmpdir rescue TMP_DIR), ".blank.cpp")
  unless File.exist? blank_cpp_path
    File.write(blank_cpp_path, 'int main() { return 0; }')
  end

  @cflags[flags.to_s] ||= flags.find do |flag|
    system "#{CXX} #{flag} #{blank_cpp_path} -E 1>#{NULL} 2>#{NULL}"
  end
end

def root_sh(command)
  if Process.uid == 0
    sh command
  else
    require_executable! SUDO
    sh "#{SUDO} #{command}"
  end
end


# Rake tasks
# ----------

task :default => [BIN]

rule '.o' => '.cc' do |t|
  flags = [try_cxxflags('-std=c++11', '-std=c++0x', ''), CXXFLAGS, NODEBUG_FLAG,
           "-DLIBSECCOMP_VERSION_MAJOR=#{pkgconfig('--modversion libseccomp').to_i}",
           pkgconfig('--cflags libseccomp')].join(' ')
  require_executable! CXX
  sh "#{CXX} #{flags} -c -o #{t.name} #{t.source}"
end

file BIN => OBJ do |t|
  require_executable! LD
  sh "#{LD} -o #{t.name} #{t.prerequisites * ' '} #{pkgconfig('--libs libseccomp')}"
end

task :lrun_group do |t|
  # check group
  next if File.read('/etc/group').lines.any? { |line| /^#{LRUN_GROUP}:/ =~ line }
  # add lrun group
  require_executable! GROUPADD
  root_sh "#{GROUPADD} -r #{LRUN_GID ? "-g #{LRUN_GID}" : ''} #{LRUN_GROUP}"
end

task :install => [BIN, :lrun_group] do |t|
  require_executable! INSTALL
  root_sh "#{INSTALL} -D -m4550 -oroot -g#{LRUN_GROUP} -s #{BIN} #{ENV['DESTDIR']}#{PREFIX}/sbin/lrun"
end
